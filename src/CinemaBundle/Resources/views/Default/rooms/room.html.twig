{% extends 'AppBundle::base.html.twig' %}

{% block title %}Salle {{ type_salle }}{% endblock %}
{% block bodyclass %}salle-{{ type_salle }}{% endblock bodyclass %}


{% block javascripts %}
    <script src="https://www.gstatic.com/firebasejs/3.6.4/firebase.js"></script>
    <script src="{{ asset("bundles/chat/js/jquery.min.js") }}"></script>
    <script src="{{ asset("bundles/cinema/js/room.js") }}"></script>
    {% block javascriptsroom %}
    {% endblock javascriptsroom %}
{% endblock javascripts %}



{% block body %}
    <h1>Salle <span id="type-salle">{{ type_salle }}</span></h1>
    <div id="player"></div>
    <div id="content-video">
        <div id="video-read"></div>
        <div id="video-info"></div>
    </div>
    <div id="content-other-video">
    </div>

    <script>
        // 2. This code loads the IFrame Player API code asynchronously.
        var tag = document.createElement('script');

        tag.src = "https://www.youtube.com/iframe_api";
        var firstScriptTag = document.getElementsByTagName('script')[0];
        firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

        // 3. This function creates an <iframe> (and YouTube player)
        //    after the API code downloads.
        var player;
        function onYouTubeIframeAPIReady() {
            player = new YT.Player('player', {
                height: '360',
                width: '640',
                videoId: 'Q4oInT79CUk',
                events: {
                    'onReady': onPlayerReady,
                    'onStateChange': onPlayerStateChange
                }
            });
        }

        // 4. The API will call this function when the video player is ready.
        function onPlayerReady(event) {
            event.target.playVideo();
        }

        // 5. The API calls this function when the player's state changes.
        //    The function indicates that when playing a video (state=1),
        //    the player should play for six seconds and then stop.
        var done = false;
        function onPlayerStateChange(event) {
            if (event.data == YT.PlayerState.PLAYING && !done) {
                //setTimeout(stopVideo, 6000);
                done = true;
            }
        }
        function stopVideo() {
            player.stopVideo();
        }
    </script>

{% endblock body %}